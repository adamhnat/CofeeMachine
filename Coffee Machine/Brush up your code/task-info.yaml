type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: actuion.sh.py
  visible: true
  text: |
    class MyCoffeeMachine:
        ESPRESSO = {
            "water": 250,
            "milk": 0,
            "beans": 16,
            "cost": 4
        }

        LATTE = {
            "water": 350,
            "milk": 75,
            "beans": 20,
            "cost": 7
        }

        CAPPUCINO = {
            "water": 200,
            "milk": 100,
            "beans": 12,
            "cost": 6
        }

        coffee_map = {
            1:ESPRESSO,
            2:LATTE,
            3:CAPPUCINO
        }

        def __init__(self):
            self.money_lvl = 550
            self.water_lvl = 400
            self.milk_lvl = 540
            self.beans_lvl = 120
            self.cups_lvl = 9

        def buy(self,_type=None):
            c_cofee = self.coffee_map.get(int(_type))
            if self.validate(c_cofee) != 0:
                self.make_cofee(c_cofee)

        def validate(self, _type):
            if self.milk_lvl - _type['milk'] < 0:
                print("Sorry, not enough milk!")
                return 0
            if self.beans_lvl - _type['beans'] < 0:
                print("Sorry, not enough beans!")
                return 0
            if self.water_lvl - _type['water'] < 0:
                print("Sorry, not enough water!")
                return 0
            print("I have enough resources, making you a coffee!")

        def make_cofee(self, c_cofee):
            self.money_lvl += c_cofee['cost']
            self.milk_lvl -= c_cofee['milk']
            self.beans_lvl -= c_cofee['beans']
            self.water_lvl -= c_cofee['water']
            self.cups_lvl -= 1

        def fill(self,waterq,milkq,beansq,cupsq):
            self.water_lvl += waterq
            self.milk_lvl += milkq
            self.beans_lvl += beansq
            self.cups_lvl += cupsq

        def take(self):
            print("I gave you $", self.money_lvl)
            self.money_lvl = 0

        def status(self):
            print("The coffee machine has:\n",
                self.water_lvl , " of water\n",
                self.milk_lvl , " of milk\n",
                self.beans_lvl , " of cofee beans\n",
                self.cups_lvl , " of disposable cups\n",
                "$", self.money_lvl , " of money" )


    cm = MyCoffeeMachine()
    action=''

    while action != 'exit':
        action = input("Write action (buy, fill, take, remaining, exit):")
        if action == "buy":
            _type = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
            if _type == 'back':
                continue
            else:
                cm.buy(_type)
        elif action == "fill":
            waterq = int(input("Write how many ml of water do you want to add:"))
            milkq =  int(input("Write how many ml of milk do you want to add:"))
            beansq = int(input("Write how many grams of coffee beans do you want to add:"))
            cupsq = int(input("Write how many disposable cups of coffee do you want to add:"))
            cm.fill(waterq,milkq,beansq,cupsq)
        elif action == "take":
            cm.take()
        elif action == "remaining":
            cm.status()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/68/stages/371/implement">JetBrains
    Academy</a>
  time: Tue, 07 Jul 2020 20:28:28 UTC
record: 1
